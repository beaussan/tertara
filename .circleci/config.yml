version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: circleci/postgres:9.6.5
        environment:
          POSTGRES_DB: psqluer
          POSTGRES_USER: psqluer
          POSTGRES_PASSWORD: psqlpassword
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: tertara-{{ checksum "pom.xml" }}
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: tertara-{{ checksum "pom.xml" }}
      - run:
          name: Build and test
          command: |
            mvn package -B  #run your tests
      - run:
          name: Repport to Codecov
          command: |
            bash <(curl -s https://codecov.io/bash)
      - run:
          name: Copy deployment artifacts to workspace
          command: |
            cp target/tertara-*.jar /tmp/standalone-app.jar
            cp .circleci/setup-heroku.sh /tmp/setup-heroku.sh
      - store_test_results:
          path: target/surefire-reports

      - store_artifacts:
          path: /tmp/standalone-app.jar

      - persist_to_workspace:
          root: /tmp
          paths:
            - standalone-app.jar
            - setup-heroku.sh

  deploy-heroku:
    docker:
    - image: circleci/openjdk:8-jdk
    working_directory: ~/deploy
    steps:
      # why rebuild something we already tested, rebuilding invalidates any previous confidence?!
      - attach_workspace:
          at: /tmp

      - run:
          name: Run setup script
          command: bash /tmp/setup-heroku.sh

      - run:
          name: Heroku Deploy
          command: |
            cp /tmp/standalone-app.jar .
            ls -la
            heroku plugins:install heroku-cli-deploy
            heroku plugins:install heroku-cli-deploy  # when debugging on circle image, first run succeeded, but did not make plugin available
            heroku deploy:jar standalone-app.jar --app $HEROKU_APP_NAME
      - run:
          name: Smoke Test
          command: |
            # Heroku deploy command will pass even if application crashes. Simple smoke test to make sure app is up.
            HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" https://$HEROKU_APP_NAME.herokuapp.com/ping`
            if [ "$HTTPCODE" -ne 200 ];then
              echo "heroku app not responding, failing deploy"
              exit 1
            fi
workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-heroku:
          requires:
            - build
          filters:
            branches:
              only: master
